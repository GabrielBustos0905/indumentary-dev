// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  name      String
  password  String?    @db.Text
  userType  UserRole   @default(CLIENT)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Order     Order[]
  Favorite  Favorite[]
}

model Product {
  id          String  @id @default(uuid())
  name        String
  slug        String  @unique
  description String?
  price       Float
  stock       Int     @default(0)

  isFeatured Boolean @default(false)
  offer      Float?

  type   ProductType @relation(fields: [typeId], references: [id])
  typeId String

  availableSizes String[]
  images         ProductImage[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]
  Favorite  Favorite[]
}

model ProductImage {
  id  String @id @default(uuid())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model ProductType {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  imageUrl    String? // imagen para representar la categor√≠a
  products    Product[]
}

model Order {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())

  items OrderItem[]
}

model OrderItem {
  id      String @id @default(uuid())
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  size      String // Ej: "M", "L"
  quantity  Int
  unitPrice Float // Precio en ese momento (con o sin oferta)
}

model Favorite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}
